generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("MONGODB_URI") // uses connection pooling
}


// model Account {
//   id                 String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId             String  @db.ObjectId
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model User {
//   id              String      @id @default(auto()) @map("_id") @db.ObjectId
//   name            String?
//   username        String?     
//   email           String      @unique
//   createdAt       DateTime    @default(now())
//   emailVerified   DateTime?   @map("verifiedAt")
//   image           String?
//   Account         Account[]
//   Session         Session[]
//   @@map("users")
// }
 
// model Session {
//   id              String      @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken    String      @unique
//   userId          String      @db.ObjectId
//   expires         DateTime    @map("expiresAt")
//   user            User        @relation(fields: [userId], references: [id])
//   @@map("Session")
// }
 
// model VerificationToken {
//   id              String      @id @default(auto()) @map("_id") @db.ObjectId
//   identifier      String
//   token           String      @unique
//   expires         DateTime    @map("expiresAt")
//   @@unique([identifier, token])
//   @@map("verification_tokens")
// }

// --------------------


model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// ---------

// model User {
//   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   name           String?
//   email          String?   @unique
//   emailVerified  DateTime?
//   image          String?
//   hashedPassword String?
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt

//   accounts Account[]
// }

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String  @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.String
//   access_token      String? @db.String
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.String
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }